<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Clarence's Coding Journal]]></title>
  <link href="http://clarenceb.github.io/atom.xml" rel="self"/>
  <link href="http://clarenceb.github.io/"/>
  <updated>2014-07-22T17:18:45+10:00</updated>
  <id>http://clarenceb.github.io/</id>
  <author>
    <name><![CDATA[Clarence Bakirtzidis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Clojure]]></title>
    <link href="http://clarenceb.github.io/blog/2013/08/04/learning-clojure/"/>
    <updated>2013-08-04T22:48:00+10:00</updated>
    <id>http://clarenceb.github.io/blog/2013/08/04/learning-clojure</id>
    <content type="html"><![CDATA[<h2>The land of Clojure goodness</h2>

<p>A couple of weeks ago I rolled off from my previous client and I joined an existing project at a new client.   My new project has already been active for about a year now.  The interesting thing from a technology point of view is that the core language used on this project is <a href="http://clojure.org/">Clojure</a>.   The prospect of learning and using a functional programming language like Clojure is very exciting for me as I spent the last several months on a project where the main language used was good old boring Java.</p>

<p>Most of my career I&rsquo;ve been doing imperative-style programming, usually in the form of Object-Oriented programming.  Earlier this year I tried my hand at <a href="http://www.scala-lang.org/">Scala</a> by following along in the excellent <a href="http://www.coursera.org/">Coursera</a> course <a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a>.  This course taught me a few of the fundamental Functional Programming concepts so I wasn&rsquo;t completely new going into Clojure.</p>

<h2>What is Clojure?</h2>

<p>Briefly, Clojure is a general purpose, functional, dynamic programming language which targets the Java Virtual Machine (JVM).    Clojure is a dialect of Lisp.  I remember learning Lisp when I was at University and I remember all the peculiar nested parentheses that confused me at times.  Luckily, Clojure makes some trade-offs in favour of wider adoption and accessibility to mainstream developers over being a pure Lisp clone.  This means that you&rsquo;ll see syntactic sugar and other data structures &ndash; not everything is a list.</p>

<h2>Where did I start my learning?</h2>

<p>Luckily, I had a couple of days before starting on my new project to get some exposure to Clojure.  I started with the awesome <a href="http://clojurekoans.com/">Clojure Koans</a>.  The Koans are mini exercises where you fix failing tests by writing code and you follow a learning path through the main parts of Clojure.  Next, I started looking at <a href="http://www.4clojure.com/">4Clojure.com</a> where you solve progressively harder problems by filling in code snippets and submitting your solution &ndash; this is entirely web based so no extra tools are required though you should have some basic Clojure knowledge first.</p>

<h2>How is going so far?</h2>

<p>I&rsquo;m lucky in that I am in an awesome, supportive team that practices pair programming on all user stories.  This means that in the two short weeks that I have been on my project I have picked up a fair amount of Clojure and learnt some useful tips from experienced Clojure developers.  Clojure is mostly used in the backed services on my project and the front-end makes use of <a href="http://angularjs.org/">AngularJS</a>.  This means that I am dividing my time between learning Clojure and AngularJS (which is also new for me).</p>

<p>So far I&rsquo;m finding Clojure to be a very powerful and productive language.  It reminds me of the &ldquo;wow&rdquo; moment I experienced when I first started learning <a href="http://www.ruby-lang.org/">Ruby</a> after having spent a lot of time in C# and Java.  The first thing I noticed was how little code was required to implement a feature and without excessive ceremony and boilerplate code.</p>

<h2>Tooling</h2>

<p>I am using Leiningen from the commandline for most build and testing tasks but using <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> with the <a href="http://plugins.jetbrains.com/plugin?pluginId=4050">La Clojure plugin</a> for code editing, navigation and refactoring.  IntelliJ was chosen by the team I joined so I am just sticking with that for now.  Another team using Clojure at my current client develops in <a href="http://www.jetbrains.com/idea/">Emacs</a>.  I&rsquo;m keen to try out Emacs when I am a bit more confident with Clojure as I don&rsquo;t want to introduce too many new things at once!</p>

<h2>What&rsquo;s next?</h2>

<p>I&rsquo;m currently going through the book <a href="http://pragprog.com/book/shcloj2/programming-clojure">Programming Clojure (2nd edition)</a> by Stuart Halloway and Aaron Bedra to gain a bit more depth and breadth in Clojure.  However, I expect to get better at it through practice and pairing on a real production codebase (i.e. my client project described earlier).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Viewing Git History in Summary Form]]></title>
    <link href="http://clarenceb.github.io/blog/2012/09/04/viewing-git-history-in-summary-form/"/>
    <updated>2012-09-04T12:00:00+10:00</updated>
    <id>http://clarenceb.github.io/blog/2012/09/04/viewing-git-history-in-summary-form</id>
    <content type="html"><![CDATA[<p>I use this one all the time for getting a nice summary of git commits:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what the output looks like (used on the Homebrew git repo):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* d66c9f3 2011-03-16 | Boost version bump to 1.46.1 [Clint Shryock]
</span><span class='line'>* 43019ac 2011-03-16 | Update JRuby to 1.6.0. [Aku Kotkavuo]
</span><span class='line'>* 8ffc126 2011-03-16 | Erlang R14B02 [Yurii Rashkovskii]
</span><span class='line'>* 24f4ad5 2011-03-16 | Gearman 0.18 [Clint Shryock]
</span><span class='line'>* ec6521e 2011-03-15 | Fix keg-only, non-system dupes [Adam Vandenberg]
</span><span class='line'>* fa2f638 2011-03-15 | Document keg-only system duplicates. [Adam Vandenberg]
</span><span class='line'>* 3338b14 2011-03-15 | install - change keg-only warning [Adam Vandenberg]
</span><span class='line'>* 9eb7c19 2011-03-15 | keg-only: provide more info about system dupes [Adam Vandenberg]
</span><span class='line'>* d600846 2011-03-15 | scantailor: add libtiff dependency [Adam Vandenberg]
</span><span class='line'>* 309ae6b 2011-03-15 | keg - use proper inheritance style [Adam Vandenberg]
</span><span class='line'>* 3b25f34 2011-03-15 | Add new fontforge git repo as HEAD [codingisacopingstrategy]
</span><span class='line'>* ac95e5c 2011-03-15 | New formula: mpg321 [Luca Spiller]
</span><span class='line'>* 48c0ab0 2011-03-15 | Fix homepage audit warnings [Adam Vandenberg]</span></code></pre></td></tr></table></div></figure>


<p>The output will also show any tags and visually show branches and merges.</p>

<p>You can then add it to your git config as an alias:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[alias]
</span><span class='line'>  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short</span></code></pre></td></tr></table></div></figure>


<p>And use it like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git hist</span></code></pre></td></tr></table></div></figure>


<p>I got this tip from the following git tutorial site: <a href="http://gitimmersion.com/">http://gitimmersion.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Wireless Internet Working on Centos 6 on Your MacBook Pro]]></title>
    <link href="http://clarenceb.github.io/blog/2012/07/05/getting-wireless-internet-working-on-centos-6-on-your-macbook-pro/"/>
    <updated>2012-07-05T12:00:00+10:00</updated>
    <id>http://clarenceb.github.io/blog/2012/07/05/getting-wireless-internet-working-on-centos-6-on-your-macbook-pro</id>
    <content type="html"><![CDATA[<p>At home I have been setting up CentOS 6.2 on a spare MacBook Pro (thanks to my IS friend at work) for learning about RHEL 6.  Since I use a wireless router, I wanted to get a wireless connection setup on the laptop.  The MacBook Pros use a Broadcom wireless NIC:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lspci | grep Broadcom
</span><span class='line'>04:00.0 Network controller: Broadcom Corporation BCM43224 802.11a/b/g/n Wireless LAN Controller (rev 01)</span></code></pre></td></tr></table></div></figure>


<p>I initially tried compiling and installing the Broadcom driver following the (roughly similar) steps described <a href="http://ktaraghi.blogspot.com.au/2011/08/how-to-install-broadcom-bcm4311-bcm4312.html">here</a> and <a href="http://wiki.centos.org/HowTos/Laptops/Wireless/Broadcom">here</a> but with no luck (#sadtrombone).</p>

<p>Later, I saw a note at the top of the second page (referenced above) which linked to a source RPM called <a href="http://elrepo.org/tiki/wl-kmod">wl-kmod</a> on <a href="http://elrepo.org/">ELRepo.org</a>.  I thought I&rsquo;d give it one more try so I followed the relatively short and simple instructions on the wl-kmod page and it worked without a hitch!</p>

<p>The steps involve you installing some development tool packages, downloading a SRPM for wl-kmod, downloading the source for the Broadcom driver (64-bit in my case), building and installing the final RPM for wl-kmod.  Once you either reboot or manually add the Linux kernal modules from the command line you see a new &ldquo;Wireless Networks&rdquo; section appear under the already existing &ldquo;Wired Networks&rdquo; section on the top right of your desktop (if you are running one that is).</p>

<p>You can then proceed to select one of the wireless networks that are detected (or manually add one yourself) and enter the wireless security details.</p>

<p>From the command line you will see the new wireless interface:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ifconfig eth1
</span><span class='line'>eth1    Link encap:Ethernet HWaddr:xxxxxxxxxxxx
</span><span class='line'>        inet addr:xxxxxxxxxx
</span><span class='line'>        ...etc...</span></code></pre></td></tr></table></div></figure>


<p>From then onwards it should just work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Summit, Melbourne]]></title>
    <link href="http://clarenceb.github.io/blog/2012/05/16/aws-summit/"/>
    <updated>2012-05-16T12:00:00+10:00</updated>
    <id>http://clarenceb.github.io/blog/2012/05/16/aws-summit</id>
    <content type="html"><![CDATA[<p>Yesterday (15th May 2012), I attended the <a href="http://aws.amazon.com/apac/awssummit-au/">AWS Summit</a> in Melbourne.  This was a single day event covering the future of the AWS Cloud and incorporating some deeper dive sessions.  In the middle of the day there were three (3) breakout tracks.  I attended the AWS &ldquo;Ninja&rdquo; Training track (the other two were Executive and Architecture tracks).</p>

<p>Most of the sessions were by Amazon AWS speakers; except for a couple by ThoughtWorks and one by TrendMicro.  I particularly liked the &ldquo;Continuous Delivery in the Cloud, The Devops Warrior Workshop&rdquo; session by Nigel Fernandes and Fabio Lessa of ThoughtWorks; mostly because it was a bit deeper than the other sessions and showed some real-world application of Continuous Delivery on the AWS cloud.</p>

<p>The presentations and supplemental materials will be available in about a week&rsquo;s time at the following URL: <a href="http://aws.amazon.com/awssummit">http://aws.amazon.com/awssummit</a>.  Nigel and Fabio&rsquo;s code for the presentation are on Github and will be referenced in the slides that are published.</p>

<p>The event is being repeated tomorrow in Sydney.  To follow along on Twitter, see the hashtag: <a href="https://twitter.com/#!/search/%23awssummit">#awssummit</a>.</p>

<p>Some useful topics/resources mentioned in various talk were:</p>

<ul>
<li>Guidance for designing different types of applications in the cloud at <a href="http://aws.amazon.com/architecture/">AWS Reference Architectures</a></li>
<li>Automating the provisioning of AWS resources with <a href="http://aws.amazon.com/cloudformation/">CloudFormation</a> and building CloudFormation templates with <a href="http://aws.amazon.com/developertools/6460180344805680">CloudFormer</a> from an existing set of resources</li>
<li>Taking advantage of <a href="http://aws.amazon.com/autoscaling/">Auto Scaling</a> to automatically scale your fleet of servers up or down; particularly <a href="http://docs.amazonwebservices.com/AutoScaling/latest/DeveloperGuide/scaling_typesof.html">Scaling by Policy</a></li>
<li>Using <a href="http://aws.amazon.com/elasticache/">ElasticCache</a> for storing user session data in memory externally from your web tier to allow scaling up/down and deploys to happen more easily</li>
<li>Using <a href="http://aws.amazon.com/iam/">IAM</a> credentials in EC2 AMIs rather than your AWS credentials to limit potential damage if credentials are compromised</li>
<li>Bootstrapping launched AMIs via User Data scripts (e.g. passing in credentials)</li>
<li>Taking advantage of metadata <a href="http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tags</a> on AWS resources to more easily manage them</li>
<li>Using <a href="http://aws.amazon.com/dynamodb/">DynamoDB</a> to support <a href="http://en.wikipedia.org/wiki/Big_data">Big Data</a> scenarios and have a fully managed and scalable database</li>
</ul>


<p>There was also mention of the <a href="http://reinvent.awsevents.com/">AWS re:Invent</a> conference later in the year in Las Vegas.  I&rsquo;ll see if I can use my training budget for this :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking Your GitHub SSH Key Fingerprints]]></title>
    <link href="http://clarenceb.github.io/blog/2012/03/08/checking-your-github-ssh-key-fingerprints/"/>
    <updated>2012-03-08T12:00:00+11:00</updated>
    <id>http://clarenceb.github.io/blog/2012/03/08/checking-your-github-ssh-key-fingerprints</id>
    <content type="html"><![CDATA[<p>Regular GitHub users are probably aware of the recent GitHub <a href="https://github.com/blog/1068-public-key-security-vulnerability-and-mitigation">security vulnerability</a> that was exploited by this <a href="http://homakov.blogspot.com.au/2012/03/im-disappoint-github.html">fellow</a>. You&rsquo;ve also probably just received instructions via email to <a href="https://github.com/settings/ssh/audit">audit</a> your SSH keys.  An easy way to do this is to run following command on your SSH key(s) stored on your computer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -lf &lt;path_to_your_public_ssh_key&gt;</span></code></pre></td></tr></table></div></figure>


<p>This will then display the fingerprint of your public key which you can then compare to fingerprint displayed next to your public key on GitHub.</p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -lf dummy.pub  2048 d3:c7:8d:73:b4:6e:00:5d:ce:c6:85:04:9e:6c:67:51 dummy.pub (RSA)</span></code></pre></td></tr></table></div></figure>


<p>In this case, the fingerprint is the part:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d3:c7:8d:73:b4:6e:00:5d:ce:c6:85:04:9e:6c:67:51</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RedDot Ruby Conf, Singapore]]></title>
    <link href="http://clarenceb.github.io/blog/2011/05/01/reddot-ruby-conf/"/>
    <updated>2011-05-01T12:00:00+10:00</updated>
    <id>http://clarenceb.github.io/blog/2011/05/01/reddot-ruby-conf</id>
    <content type="html"><![CDATA[<p>On the Easter weekend I attended Singapore&rsquo;s first ever Ruby conference (called &ldquo;<a href="http://reddotrubyconf.com/">RedDotRubyConf</a>&rdquo;).  It was held at the <a href="http://www.smu.edu.sg/">Singapore Management University</a> (SMU) on Friday, 22nd and Saturday, 23rd April 2011.  It attracted around 240 attendees from Singapore, Hong Kong, Indonesia, Phillipines, Vietnam, Cambodia, Japan, Australia, USA, and other countries.</p>

<p>The first day started off with registrations where we each got a conference t-shirt and a bag of goodies including a <a href="http://twitpic.com/4o0lpt">Field Notes Memo Book</a> and GitHub sponsored <a href="http://twitpic.com/4o0nj1">drink vouchers</a>.  After downing our favourite beverages (coffee, Coke Zero, tea or bottled water) the welcome note started off with <a href="https://twitter.com/#!/andycroll">Andy Croll</a> (conference organiser).</p>

<p>The first speaker was <a href="https://twitter.com/#!/imf">Ian McFarland</a> from <a href="http://pivotallabs.com/">Pivotal Labs</a> (they are one of the main sponsors of the event), making up for <a href="http://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Matz&rsquo;s</a> late arrival to the stage.  He spoke about Ruby and Agile with some key points on test-driving everything, TDD/BDD, iterative development, continuous integration, the importance and benefits of pair-programming, keeping an &ldquo;anchor&rdquo; team member on a project when members roll-off and roll-on to get them up to speed, having productive workspaces and not working more than 8 hours a day.  He also gave a nice insight into how Pivotal Labs work with clients on projects and a look at their office space &ndash; quite impressive.</p>

<p>Matz (<a href="http://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Yukihiro Matsumoto</a>) came on second and was a much anticipated speaker for obvious reasons! He spoke about Ruby&rsquo;s humble beginnings and how it has grown over the years to where it is today &ndash; a large, vibrant, inclusive and friendly community (MINSWAN &ndash; &ldquo;Matz is nice, so we are nice&rdquo;).  Even <a href="http://martinfowler.com/">Martin Fowler</a> got a special mention as being one of these nice people in the community.  He also mentioned that although Ruby is not the fastest, simplest, or easiest language to learn, it does have &ldquo;The Nice Community&rdquo; which he sees as very important and that other open source software sometimes lacks.  Although Ruby is productive and fun, he thinks we should keep advancing the technology before &ldquo;the shark&rdquo; catches up to it/us; this will ensure Ruby has a long and prosperous life ahead.</p>

<p>One last thing Matz talked about was the Ruby Rite VM that he is currently working on and plans to release by the end of 2011.  It targets embedded environments and has a very configurable and component based approach to allow a small footprint that only includes the part of Ruby that are needed.  He thinks Rite VM will give the Lua programming language a run for its money in the embedded programming space since Ruby is a fully-featured objected-oriented language.</p>

<p>The remaining talks were very good and covered diverse topics like using the <a href="http://www.r-project.org/">&lsquo;R&rsquo; programming language</a> from Ruby, Agile testing, deploying with <a href="http://wiki.opscode.com/display/chef/Home">Chef</a>, multi-tenancy in Rails,  Agile in real-life (a client&rsquo;s view), advanced git techniques, under the covers in Rails 3, Smalltalk and what Ruby borrowed from it, building financial apps in Rails, how to make outsourcing Rails projects successful, and lots more cool topics.</p>

<p>Overall, I was very impressed by the event because it was well organised, it had quality presenters, the content was interesting, and it had clearly evident theme of participation, inclusiveness, helpfulness of the Ruby community and giving back to the community.  Quite a few big names (both companies and individuals) in the Ruby community were present which made the conference even more of a success.  It looks like I was the only ThoughWorker there but I did meet a few fellow Australians and bumped into an ex-client developer, <a href="http://twitpic.com/4o0yye">Keith Pitt</a>, who worked on a Rails project with me about a year ago.</p>

<p>Other than Ruby and its community, the other main theme was around Agile software development.  I think Pivotal Labs stole the show as they had a few speakers and attendees present and they explained and showed how they work on their projects.</p>

<p>Practically every company that presented said they were hiring Ruby developers and on the second day of the conference there was a hiring fair so that companies didn&rsquo;t have to scramble over themselves and poach from each other.  They also ran a coding competition with a MacBook Air as the prize (put up by <a href="http://www.viki.com/">ViKi</a>) and no doubt used the results of that to put forward some job offers.</p>

<p>I think there is a lot of interest in Ruby and Agile in Singapore judging by the attendance record and the fact that attendees came from all over the world.</p>

<p>The highlights of the conference for me would have to be:</p>

<ul>
<li>Yukihiro &lsquo;Matz&rsquo; Matsumoto &ndash; the creator of the Ruby language &ndash; presenting his view of the future of Ruby (check out my <a href="http://twitpic.com/4rx404">fan pic</a> and also who he thinks is part of the <a href="http://twitpic.com/4o19pk">Nice Community</a> hehe)</li>
<li>Dave Thomas &ndash; Pragmatic Programmers, his talk was well received by the locals</li>
<li>Tom Preston-Werner &ndash; the co-founder of Github (mostly for the free <a href="http://twitpic.com/4o0nj1">drink vouchers</a> perhaps!)</li>
</ul>


<p>I&rsquo;m looking for to attending again next year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Development Sea Change]]></title>
    <link href="http://clarenceb.github.io/blog/2011/01/14/software-development-sea-change/"/>
    <updated>2011-01-14T12:00:00+11:00</updated>
    <id>http://clarenceb.github.io/blog/2011/01/14/software-development-sea-change</id>
    <content type="html"><![CDATA[<p>Prior to joining ThoughtWorks I was mostly developing using Microsoft-based technologies on the .NET platform.  Whilst there are some nice things on this platform (C# being one of them) I felt it was time for a change and to try taking some risks by moving into the uncharted territory called &ldquo;open source&rdquo;.</p>

<p>My first project, after 3 weeks on the beach (i.e. the bench, only more pleasant and sunny), was a Ruby on Rails project.  I had heard of Ruby and even had a passing stab at writing something equivalent of the &ldquo;15 minute blog&rdquo; website. This was the kind of challenge I was looking for &ndash; something out of my depth and exciting.  Lucky for me, the team I joined was <em>awesome</em> and because we pair quite extensively on ThoughtWorks projects I was somewhat productive after about 2 weeks.</p>

<p>After a year of Ruby/Rails projects I still feel like a newbie compared to the 5.5+ years I spent doing C# (and then several years doing Java, C++, etc, before that).  Looking back I think learning &ldquo;Ruby&rdquo; and &ldquo;Rails&rdquo; was only part of the challenge.  I was really working with tools, IDEs, and platforms completely alien to me, such as: Mac OS X, CentOS and Ubuntu Linux, RubyMine IDE, TextMate, Cucumber, RSpec, Selenium, PostgreSQL, MySQL, dozens of Ruby gems, Git, Github, Mercurial, Android SDK, Eclipse, Maven, JMeter, and lots more.</p>

<p>This initially made me feel quite uncomfortable as I was leaving my familiar Windows, Visual Studio and .NET environments behind.  With so many new variables introduced at the one time there was certainly plenty to keep me busy.  Apart from the technology landscape changes I was also thrust into the world of Agile software development.</p>

<p>A year and a half later I am on a Ruby on Rails project again targeting smart phones (like Android and iPhone) and also desktop web users.  The whole infrastructure is deployed &ldquo;in the cloud&rdquo; using Amazon Web Services (AWS). It&rsquo;s really a great project with a great team.  I am still learning and still feel like a newbie at times but when I look back I can see how far I have come.</p>

<p>Some of the books that inspired me along the way include:</p>

<ul>
<li><a href="http://pragprog.com/book/tpp/the-pragmatic-programmer">The Pragmatic Programmer: From Journeyman to Master</a></li>
<li><a href="http://pragprog.com/book/pad/practices-of-an-agile-developer">Practices of an Agile Developer: Working in the Real World</a></li>
<li><a href="http://pragprog.com/book/sdcoach/agile-coaching">Agile Coaching</a></li>
<li><a href="http://www.amazon.com/Lean-Software-Development-Agile-Toolkit/dp/0321150783">Lean Software Development: An Agile Toolkit</a></li>
<li><a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">The Passionate Programmer: Creating a Remarkable Career in Software Development</a> (this one in particular, definitely worth the read!)</li>
</ul>


<p>So if you are feeling bored with your current job or looking for a change I can only say &ldquo;Just do it!&rdquo; (thanks to Nike for that one).</p>

<p><strong><em>Side note</em></strong>: I have been on a .NET project as well in this time (mostly in a coaching role) and we certainly do our fair share of .NET work at ThoughtWorks.  .NET is something I am still keeping my eye on with .NET 4, ASP.NET MVC 3, and other interesting developments in the pipeline. However, now I would certainly consider open-source technologies and not limit myself to proprietary software.</p>
]]></content>
  </entry>
  
</feed>
